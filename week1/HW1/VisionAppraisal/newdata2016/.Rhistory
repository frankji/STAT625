#Usage: myreg(KEYWORDS, LIST, REGPATTERN, NUMERIC)
ln<-grep(pat, x)
if (length(ln) == 0) return(NA)
ln<-ln+nextline
reg <- regmatches(x[ln], regexpr(regpat, x[ln]))
if (usefirst) reg<-reg[1]
# Remove useless characters
re.out <- gsub('<[^<>]*>', '', reg)
re.out <- trimws(re.out)
if (is.na(re.out) || re.out == '') return(NA)
if (numonly)
re.out<-as.numeric(gsub('[^0-9\\.]', '', re.out))
return(re.out)
}
catchtab <- function(x, tabname){
#Function to catch the only table with the name
ln<-grep('^\\s+<table.*>', x)
cap <- ln(trimws(x[ln+2]) == tabname) + 2
if (length(cap) >= 1) {
cap <- cap[1]
term <- grep('</table>', x[cap:length(x)])[1] + cap - 2
content <- x[cap:term]
if (length(grep('No Data for', content)) > 0) return(NA)
ti <- gsub('<th[^<>]+>', '', trimws(x[cap+2]))
ti <- gsub('</th>', ',', ti)
ti <- gsub('<br>', ' ', ti)
ti <- strsplit(ti, split = ',')[[1]]
content <- content[grep('<td>.+</td>', content)]
content <- gsub('<td[^<>]*>|</td>$', '', content)
content <- gsub('</td>', '\t', content)
tab <- t(sapply(content, function(x) strsplit(x, split = '\t')[[1]]))
tab <- as.data.frame(tab, stringsAsFactors = FALSE)
colnames(tab) <- ti
rownames(tab) <- 1:nrow(tab)
tab[tab == ''] <- NA
return(tab)
} else return(NA)
}
getgsize <- function(x){
if (length(x) > 0) {
return(sum(as.numeric(gsub('^[^0-9]|[^0-9]$', '', x))))
} else return(NA)
}
myparse <- function(file.list){
#Function to parse htmls and retrieve information
#Only for sapply
myinfo <- c(file.list['i'][[1]], rep(NA, 38), rep(0, 2))
names(myinfo)<-col.names
if (is.na(x)) return(myinfo)
gsize <- c()
x<-file.list['data'][[1]]
getit <- function(i){
myreg(col.patterns[i], x, col.repat[i], numonly = col.num[i])
}
myinfo[usearch] <- sapply(usearch, getit)
#Get tables
subtab <- catchtab(x, 'Building Sub-Areas (sq ft)')
extab <- catchtab(x, 'Extra Features')
saletab <- catchtab(x, 'Ownership History')
outtab <- catchtab(x, 'Outbuildings')
if (class(extab) == 'data.frame') {
exval <- extab[, grep('[Vv][Aa][Ll][Uu][Ee]', colnames(extab))]
myinfo['exval'] <- sum(as.numeric(gsub('[^0-9\\.]', '', exval)))
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, extab[,1])))
gsize <- c(gsize, extab[grs, 'Size'])
}
if (class(outtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, outtab[,1])))
gsize <- c(gsize, outtab[grs, 'Size'])
}
if (class(subtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, subtab[,1])))
gsize <- c(gsize, subtab[grs, 'Gross Area'])
}
myinfo["garagesqft"] <- getgsize(gsize)
if (class(saletab) == 'data.frame')
myinfo[saleinfo] <- getsale(saletab)
if (length(grep('Building 2', x)) > 0)
myinfo["multibuilding"]<-1
if (length(grep('\\+', myinfo["bedrooms"])) > 0)
myinfo["nineplus"] <- 1
myinfo["bedrooms"]<-as.numeric(gsub('[^0-9\\.]', '', myinfo['bedrooms']))
#Assign value to info
return(myinfo)
}
length(flist[1:3])
test<-flist[[1]]
lappy(flist[[1]], myparse)
lapply(flist[[1]], myparse)
?lapply
myparse(flist[[1]])
myparse <- function(file.list){
#Function to parse htmls and retrieve information
#Only for sapply
myinfo <- c(file.list['i'][[1]], rep(NA, 38), rep(0, 2))
names(myinfo)<-col.names
x<-file.list['data'][[1]]
if (is.na(x)) return(myinfo)
gsize <- c()
getit <- function(i){
myreg(col.patterns[i], x, col.repat[i], numonly = col.num[i])
}
myinfo[usearch] <- sapply(usearch, getit)
#Get tables
subtab <- catchtab(x, 'Building Sub-Areas (sq ft)')
extab <- catchtab(x, 'Extra Features')
saletab <- catchtab(x, 'Ownership History')
outtab <- catchtab(x, 'Outbuildings')
if (class(extab) == 'data.frame') {
exval <- extab[, grep('[Vv][Aa][Ll][Uu][Ee]', colnames(extab))]
myinfo['exval'] <- sum(as.numeric(gsub('[^0-9\\.]', '', exval)))
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, extab[,1])))
gsize <- c(gsize, extab[grs, 'Size'])
}
if (class(outtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, outtab[,1])))
gsize <- c(gsize, outtab[grs, 'Size'])
}
if (class(subtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, subtab[,1])))
gsize <- c(gsize, subtab[grs, 'Gross Area'])
}
myinfo["garagesqft"] <- getgsize(gsize)
if (class(saletab) == 'data.frame')
myinfo[saleinfo] <- getsale(saletab)
if (length(grep('Building 2', x)) > 0)
myinfo["multibuilding"]<-1
if (length(grep('\\+', myinfo["bedrooms"])) > 0)
myinfo["nineplus"] <- 1
myinfo["bedrooms"]<-as.numeric(gsub('[^0-9\\.]', '', myinfo['bedrooms']))
#Assign value to info
return(myinfo)
}
a<-2
a<-2
lapply(flist[[1]], myparse)
lapply(flist[1:2], myparse)
catchtab <- function(x, tabname){
#Function to catch the only table with the name
ln<-grep('^\\s+<table.*>', x)
cap <- ln[trimws(x[ln+2]) == tabname] + 2
if (length(cap) >= 1) {
cap <- cap[1]
term <- grep('</table>', x[cap:length(x)])[1] + cap - 2
content <- x[cap:term]
if (length(grep('No Data for', content)) > 0) return(NA)
ti <- gsub('<th[^<>]+>', '', trimws(x[cap+2]))
ti <- gsub('</th>', ',', ti)
ti <- gsub('<br>', ' ', ti)
ti <- strsplit(ti, split = ',')[[1]]
content <- content[grep('<td>.+</td>', content)]
content <- gsub('<td[^<>]*>|</td>$', '', content)
content <- gsub('</td>', '\t', content)
tab <- t(sapply(content, function(x) strsplit(x, split = '\t')[[1]]))
tab <- as.data.frame(tab, stringsAsFactors = FALSE)
colnames(tab) <- ti
rownames(tab) <- 1:nrow(tab)
tab[tab == ''] <- NA
return(tab)
} else return(NA)
}
lapply(flist[1:2], myparse)
myparse <- function(file.list){
#Function to parse htmls and retrieve information
#Only for sapply
myinfo <- c(file.list['i'][[1]], rep(NA, 38), rep(0, 2))
names(myinfo)<-col.names
x<-file.list['data'][[1]]
if (class(x) != 'data.frame') return(myinfo)
gsize <- c()
getit <- function(i){
myreg(col.patterns[i], x, col.repat[i], numonly = col.num[i])
}
myinfo[usearch] <- sapply(usearch, getit)
#Get tables
subtab <- catchtab(x, 'Building Sub-Areas (sq ft)')
extab <- catchtab(x, 'Extra Features')
saletab <- catchtab(x, 'Ownership History')
outtab <- catchtab(x, 'Outbuildings')
if (class(extab) == 'data.frame') {
exval <- extab[, grep('[Vv][Aa][Ll][Uu][Ee]', colnames(extab))]
myinfo['exval'] <- sum(as.numeric(gsub('[^0-9\\.]', '', exval)))
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, extab[,1])))
gsize <- c(gsize, extab[grs, 'Size'])
}
if (class(outtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, outtab[,1])))
gsize <- c(gsize, outtab[grs, 'Size'])
}
if (class(subtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, subtab[,1])))
gsize <- c(gsize, subtab[grs, 'Gross Area'])
}
myinfo["garagesqft"] <- getgsize(gsize)
if (class(saletab) == 'data.frame')
myinfo[saleinfo] <- getsale(saletab)
if (length(grep('Building 2', x)) > 0)
myinfo["multibuilding"]<-1
if (length(grep('\\+', myinfo["bedrooms"])) > 0)
myinfo["nineplus"] <- 1
myinfo["bedrooms"]<-as.numeric(gsub('[^0-9\\.]', '', myinfo['bedrooms']))
#Assign value to info
return(myinfo)
}
lapply(flist[1:2], myparse)
class(flist[[1]]['data'][[1]])
myparse <- function(file.list){
#Function to parse htmls and retrieve information
#Only for sapply
myinfo <- c(file.list['i'][[1]], rep(NA, 38), rep(0, 2))
names(myinfo)<-col.names
x<-file.list['data'][[1]]
if (class(x) != 'character') return(myinfo)
gsize <- c()
getit <- function(i){
myreg(col.patterns[i], x, col.repat[i], numonly = col.num[i])
}
myinfo[usearch] <- sapply(usearch, getit)
#Get tables
subtab <- catchtab(x, 'Building Sub-Areas (sq ft)')
extab <- catchtab(x, 'Extra Features')
saletab <- catchtab(x, 'Ownership History')
outtab <- catchtab(x, 'Outbuildings')
if (class(extab) == 'data.frame') {
exval <- extab[, grep('[Vv][Aa][Ll][Uu][Ee]', colnames(extab))]
myinfo['exval'] <- sum(as.numeric(gsub('[^0-9\\.]', '', exval)))
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, extab[,1])))
gsize <- c(gsize, extab[grs, 'Size'])
}
if (class(outtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, outtab[,1])))
gsize <- c(gsize, outtab[grs, 'Size'])
}
if (class(subtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, subtab[,1])))
gsize <- c(gsize, subtab[grs, 'Gross Area'])
}
myinfo["garagesqft"] <- getgsize(gsize)
if (class(saletab) == 'data.frame')
myinfo[saleinfo] <- getsale(saletab)
if (length(grep('Building 2', x)) > 0)
myinfo["multibuilding"]<-1
if (length(grep('\\+', myinfo["bedrooms"])) > 0)
myinfo["nineplus"] <- 1
myinfo["bedrooms"]<-as.numeric(gsub('[^0-9\\.]', '', myinfo['bedrooms']))
#Assign value to info
return(myinfo)
}
lapply(flist[1:2], myparse)
col.names <- c('pid', 'location','totval', 'address',
'yearbuilt', 'sqft', 'replcost', 'pctgood',
'style', 'model', 'grade', 'occupancy',
'actype', 'bedrooms', 'bathrooms', 'halfbaths',
'bathstyle', 'kstyle', 'exval', 'acres', 'zone',
'neighborhood', 'landval', 'garagesqft')
saleinfo <- rep(c('buyer', 'price', 'date'), 5)
saleinfo <- apply(cbind(saleinfo, 1:5), 1, function(x) paste(x, collapse = ''))
col.names[25:41] <- c(saleinfo, 'multibuilding', 'nineplus')
col.patterns <- c('', '"MainContent_lblLocation"', '"MainContent_lblGenAppraisal"',
'"MainContent_lblAddr1"', '"MainContent_ctl01_lblYearBuilt"',
'"MainContent_ctl01_lblBldArea"', '"MainContent_ctl01_lblRcn"',
'"MainContent_ctl01_lblPctGood"', '<td>[Ss][Tt][Yy][Ll][Ee][^<>]*</td>',
'<td>[Mm][Oo][Dd][Ee][Ll][^<>]*</td>', '<td>[Gg][Rr][Aa][Dd][Ee][^<>]*</td>',
'<td>[Oo][Cc][Cc][Uu][Pp][Aa][Nn][Cc][Yy][^<>]*</td>', 'AC Type[^<>]*',
'To*ta*l Be*dro*ms', 'To*ta*l Ba*thr*o*m*s', 'To*ta*l Half Ba*ths',
'Bath Style[^<>]*', 'Kitchen Style[^<>]*', '', '"MainContent_lblLndAcres"',
'"MainContent_lblZone"', '"MainContent_lblNbhd"', '"MainContent_lblLndAppr"', '')
col.repat <- c('', rep('<span[^<>]*>[^<>]*</span>', 7), rep('<td>[^<>]*</td>$', 10),
'', rep('<span[^<>]*>[^<>]*</span>', 4), '')
getsale <- function(tab){
#Function to retrieve information in table of sale history
#Including first 5 'Owner','Sale Price','Sale Date'
tab[, 'Owner'] <- gsub('&amp[;]*', '&', tab[, 'Owner'])
tab[, 'Sale Price'] <- as.numeric(gsub('[^0-9\\.]', '', (tab[, 'Sale Price'])))
sales <- as.vector(t(as.matrix(tab[1:5, c('Owner', 'Sale Price', 'Sale Date')])))
return(trimws(sales))
}
col.num <- rep(FALSE, 41)
names(col.num) <- col.names
col.num[c("totval", "sqft", "replcost", "pctgood", "halfbaths", "acres", "landval",
"garagesqft", "price1", "price2", "price3" ,"price4", "price5")] <- TRUE
usearch<-which(col.patterns != '')
myreg <- function(pat, x, regpat, numonly=FALSE, usefirst=TRUE, nextline=0){
#Function to retrieve string from a list of strings in html
#Only for pid location totval
#Usage: myreg(KEYWORDS, LIST, REGPATTERN, NUMERIC)
ln<-grep(pat, x)
if (length(ln) == 0) return(NA)
ln<-ln+nextline
reg <- regmatches(x[ln], regexpr(regpat, x[ln]))
if (usefirst) reg<-reg[1]
# Remove useless characters
re.out <- gsub('<[^<>]*>', '', reg)
re.out <- trimws(re.out)
if (is.na(re.out) || re.out == '') return(NA)
if (numonly)
re.out<-as.numeric(gsub('[^0-9\\.]', '', re.out))
return(re.out)
}
catchtab <- function(x, tabname){
#Function to catch the only table with the name
ln<-grep('^\\s+<table.*>', x)
cap <- ln[trimws(x[ln+2]) == tabname] + 2
if (length(cap) >= 1) {
cap <- cap[1]
term <- grep('</table>', x[cap:length(x)])[1] + cap - 2
content <- x[cap:term]
if (length(grep('No Data for', content)) > 0) return(NA)
ti <- gsub('<th[^<>]+>', '', trimws(x[cap+2]))
ti <- gsub('</th>', ',', ti)
ti <- gsub('<br>', ' ', ti)
ti <- strsplit(ti, split = ',')[[1]]
content <- content[grep('<td>.+</td>', content)]
content <- gsub('<td[^<>]*>|</td>$', '', content)
content <- gsub('</td>', '\t', content)
tab <- t(sapply(content, function(x) strsplit(x, split = '\t')[[1]]))
tab <- as.data.frame(tab, stringsAsFactors = FALSE)
colnames(tab) <- ti
rownames(tab) <- 1:nrow(tab)
tab[tab == ''] <- NA
return(tab)
} else return(NA)
}
getgsize <- function(x){
if (length(x) > 0) {
return(sum(as.numeric(gsub('^[^0-9]|[^0-9]$', '', x))))
} else return(NA)
}
myparse <- function(file.list){
#Function to parse htmls and retrieve information
#Only for sapply
myinfo <- c(file.list['i'][[1]], rep(NA, 38), rep(0, 2))
names(myinfo)<-col.names
x<-file.list['data'][[1]]
if (class(x) != 'character') return(myinfo)
gsize <- c()
getit <- function(i){
myreg(col.patterns[i], x, col.repat[i], numonly = col.num[i])
}
myinfo[usearch] <- sapply(usearch, getit)
#Get tables
subtab <- catchtab(x, 'Building Sub-Areas (sq ft)')
extab <- catchtab(x, 'Extra Features')
saletab <- catchtab(x, 'Ownership History')
outtab <- catchtab(x, 'Outbuildings')
if (class(extab) == 'data.frame') {
exval <- extab[, grep('[Vv][Aa][Ll][Uu][Ee]', colnames(extab))]
myinfo['exval'] <- sum(as.numeric(gsub('[^0-9\\.]', '', exval)))
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, extab[,1])))
gsize <- c(gsize, extab[grs, 'Size'])
}
if (class(outtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, outtab[,1])))
gsize <- c(gsize, outtab[grs, 'Size'])
}
if (class(subtab) == 'data.frame') {
grs <- unlist(sapply(c('FCP', 'FGR', 'OPA', 'UGR'), function(i) grep(i, subtab[,1])))
gsize <- c(gsize, subtab[grs, 'Gross Area'])
}
myinfo["garagesqft"] <- getgsize(gsize)
if (class(saletab) == 'data.frame')
myinfo[saleinfo] <- getsale(saletab)
if (length(grep('Building 2', x)) > 0)
myinfo["multibuilding"]<-1
if (length(grep('\\+', myinfo["bedrooms"])) > 0)
myinfo["nineplus"] <- 1
myinfo["bedrooms"]<-as.numeric(gsub('[^0-9\\.]', '', myinfo['bedrooms']))
#Assign value to info
return(myinfo)
}
load('flist.rda')
a<-5
result.list<-lapply(flist, myparse)
test<-unlist(result.list)
View(test)
result.list[[1]]
result.mat <- sapply(result.list, function(x) x[[1]])
View(result.mat)
result.list[[1]]
class(result.list[[1]])
result.list[[1]][1]
result.list[[1]][2]
result.mat <- t(sapply(result.list, function(x) x[[1]]))
head(result.mat)
result.mat <- sapply(result.list, function(x) x[[1]])
head(result.mat)
class(result.mat)
?lapply
result.mat <- t(lapply(result.list, function(x) x[[1]]))
result.mat <- t(result.mat)
View(result.mat)
?sapply
dim(result.mat)
result[[1]]
result.list [[1]]
result.list[[2]]
result.mat <- sapply(result.list, function(x) x)
dim(result.mat)
result.mat <- t(sapply(result.list, function(x) x))
View(result.mat)
class(result.mat)
result.mat <- sapply(result.list, function(x) x)
result.mat <- as.data.frame(t(result.mat))
View(result.mat)
col.num
col.num['bedrooms'] <- TRUE
for (i in col.num) {
info[, i] <- as.numeric(info[, i])
}
info <- as.data.frame(t(result.mat))
col.num['bedrooms'] <- TRUE
for (i in col.num) {
info[, i] <- as.numeric(info[, i])
}
result.mat <- sapply(result.list, function(x) x)
info <- as.data.frame(t(result.mat))
result.mat <- sapply(result.list, function(x) x)
info <- as.data.frame(t(result.mat), stringsAsFactors = FALSE)
col.num['bedrooms'] <- TRUE
for (i in col.num) {
info[, i] <- as.numeric(info[, i])
}
col.num
as.numeric(info[, col.num])
info[, 1]
as.numeric(info[, 1])
as.numeric(info[, c(1,2)])
apply(info[, col.num], 1, as.numeric)
t(apply(info[, col.num], 1, as.numeric))
View(t(apply(info[, col.num], 1, as.numeric)))
which(col.num)
info[, col.num] <- t(apply(info[, col.num], 1, as.numeric))
gsub('&lt;', '<', info)
class(gsub("&lt;", '<', info))
result.mat <- t(sapply(result.list, function(x) x))
result.mat <- t(apply(result.mat, 1 , function(x) gsub('&lt', '<', x)))
View(result.mat)
trans.html <- function(x){
x <- gsub('&lt;', '<', x)
x <- gsub('&gt;', '>', x)
x <- gsub('&nbsp;', NA, x)
x <- gsub('&#39;', "'", x)
x <- gsub('&amp;', '&', x)
return(x)
}
result.mat <- t(sapply(result.list, function(x) x))
result.mat <- t(apply(result.mat, 1 , trans.html))
View(result.mat)
trans.html <- function(x){
x <- gsub('&lt;', '<', x)
x <- gsub('&gt;', '>', x)
x <- gsub('&nbsp;', NA, x)
x <- gsub('&#39;', "'", x)
x <- gsub('&amp;', '&', x)
x <- gsub('<br>', ' ,', x)
return(x)
}
result.mat <- t(sapply(result.list, function(x) x))
result.mat <- t(apply(result.mat, 1 , trans.html))
info <- as.data.frame(result.mat, stringsAsFactors = FALSE)
col.num['bedrooms'] <- TRUE
info[, col.num] <- t(apply(info[, col.num], 1, as.numeric))
info[, "multibuilding"] <- info[, "multibuilding"] != 0
info[is.na(info[, "location"]), "multibuilding"] <- NA
info[, "nineplus"] <- info[, "nineplus"] != 0
info[is.na(info[, "bedrooms"]), "nineplus"] <- NA
eparse <- function(x) return(as.numeric(eval(parse(text = x))))
info[, 'bathrooms'] <- sapply(info[, 'bathrooms'], eparse, USE.NAMES = FALSE)
info[, 'bathrooms']
sapply(info[, 'bathrooms'], eparse, USE.NAMES = FALSE)
eval(parse(text = NA))
which(info[,'bathrooms']=='')
info[, 'bathrooms'] <- gsub('[^0-9\\.\\/]', '', info[, 'bathrooms'])
eparse <- function(x) return(as.numeric(eval(parse(text = x))))
info[, 'bathrooms'] <- sapply(info[, 'bathrooms'], eparse, USE.NAMES = FALSE)
info <- as.data.frame(result.mat, stringsAsFactors = FALSE)
col.num['bedrooms'] <- TRUE
info[, col.num] <- t(apply(info[, col.num], 1, as.numeric))
info[, "multibuilding"] <- info[, "multibuilding"] != 0
info[is.na(info[, "location"]), "multibuilding"] <- NA
info[, "nineplus"] <- info[, "nineplus"] != 0
info[is.na(info[, "bedrooms"]), "nineplus"] <- NA
info[, 'bathrooms'] <- gsub('[^0-9\\.\\/]', '', info[, 'bathrooms'])
eparse <- function(x) return(as.numeric(eval(parse(text = x))))
info[, 'bathrooms'] <- sapply(info[, 'bathrooms'], eparse, USE.NAMES = FALSE)
info[, "grade"] <- gsub('GRADE[_:\\s]*', '', info[, "grade"])
write.table(x = info, file = '625_dj333.csv', row.names = FALSE, sep=',')
apply(info[, c('bathrooms', 'halfbaths')], 1, function(x) sum(c(x[1], 0.5*x[2])))
sum(c(NA, NA), na.rm = TRUE)
info[, 'finalbath'] <- apply(info[, c('bathrooms', 'halfbaths')], 1, function(x) sum(c(x[1], 0.5*x[2]), na.rm = TRUE))
info[is.na(info[, "bathrooms"]) & is.na(info[, "bathrooms"]), "finalbath"] <- NA
result.mat <- t(sapply(result.list, function(x) x))
result.mat <- t(apply(result.mat, 1 , trans.html))
info <- as.data.frame(result.mat, stringsAsFactors = FALSE)
col.num['bedrooms'] <- TRUE
info[, col.num] <- t(apply(info[, col.num], 1, as.numeric))
info[, "multibuilding"] <- info[, "multibuilding"] != 0
info[is.na(info[, "location"]), "multibuilding"] <- NA
info[, "nineplus"] <- info[, "nineplus"] != 0
info[is.na(info[, "bedrooms"]), "nineplus"] <- NA
info[, 'bathrooms'] <- gsub('[^0-9\\.\\/]', '', info[, 'bathrooms'])
eparse <- function(x) return(as.numeric(eval(parse(text = x))))
info[, 'bathrooms'] <- sapply(info[, 'bathrooms'], eparse, USE.NAMES = FALSE)
info[, "grade"] <- gsub('GRADE[_:\\s]*', '', info[, "grade"])
info[, 'finalbath'] <- apply(info[, c('bathrooms', 'halfbaths')], 1, function(x) sum(c(x[1], 0.5*x[2]), na.rm = TRUE))
info[is.na(info[, "bathrooms"]) & is.na(info[, "halfbaths"]), "finalbath"] <- NA
write.table(x = info, file = '625_dj333.csv', row.names = FALSE, sep=',')
info<-read.csv('~/Courses/625_project/frank/625_dj333_xx77.csv', as.is=TRUE)
info[, 'finalbath'] <- apply(info[, c('bathrooms', 'halfbaths')], 1, function(x) sum(c(x[1], 0.5*x[2]), na.rm = TRUE))
info[is.na(info[, "bathrooms"]) & is.na(info[, "halfbaths"]), "finalbath"] <- NA
write.table(x = info, file = '~/Courses/625_project/frank/625_dj333.csv', row.names = FALSE, sep=',')
write.table(x = info, file = '~/Dropbox/625_dj333/625_dj333_xx77.csv', row.names = FALSE, sep=',')
